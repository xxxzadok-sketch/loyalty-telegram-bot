from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User
from sqlalchemy.orm import Session
import config


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in config.ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_add_bonus")],
        [InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton("üéÅ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_redemption_requests")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)


async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action = query.data

    if action == "admin_users":
        await show_users_list(query, context)
    elif action == "admin_add_bonus":
        await ask_user_for_bonus(query, context)


async def show_users_list(query, context):
    db: Session = SessionLocal()

    try:
        users = db.query(User).filter(User.registration_complete == True).all()

        if not users:
            await query.edit_message_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        message = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            message += f"ID: {user.id} | {user.first_name} {user.last_name} | –ë–∞–ª–∞–Ω—Å: {user.bonus_balance}\n"

        if len(users) > 10:
            message += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await query.edit_message_text(message)

    finally:
        db.close()


async def ask_user_for_bonus(query, context):
    context.user_data['admin_action'] = 'add_bonus'
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 1000):")


async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in config.ADMIN_IDS:
        return

    text = update.message.text

    if context.user_data.get('admin_action') == 'add_bonus':
        await process_bonus_addition(update, context, text)


async def process_bonus_addition(update, context, text):
    try:
        user_id_str, amount_str = text.split()
        user_id = int(user_id_str)
        amount = int(amount_str)

        db: Session = SessionLocal()

        try:
            user = db.query(User).filter(User.id == user_id).first()
            if user:
                bonus_amount = int(amount * 0.05)  # 5% –æ—Ç —Å—É–º–º—ã
                user.bonus_balance += bonus_amount
                db.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ!\n"
                             f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance}"
                    )
                except:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

                await update.message.reply_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name} {user.last_name} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} –±–∞–ª–ª–æ–≤.\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance}"
                )
            else:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        finally:
            db.close()

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123 1000)")