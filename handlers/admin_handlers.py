import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from database import Database
from config import ADMIN_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_ADD_POINTS_USER, ADMIN_ADD_POINTS_AMOUNT = range(2)
ADMIN_REMOVE_POINTS_USER, ADMIN_REMOVE_POINTS_AMOUNT = range(2, 4)
ADMIN_ADD_PURCHASE_USER, ADMIN_ADD_PURCHASE_AMOUNT = range(4, 6)

def get_bot():
    from main import application
    return application

async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_add_points")],
        [InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É (5%)", callback_data="admin_add_purchase")],
        [InlineKeyboardButton("‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã", callback_data="admin_remove_points")],
        [InlineKeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_redemptions")],
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if query.data == "admin_stats":
        await show_admin_stats(query)
    elif query.data == "admin_users":
        await show_users_list(query)
    elif query.data == "admin_redemptions":
        await show_redemption_requests(query)
    elif query.data == "admin_add_points":
        await start_add_points(query, context)
    elif query.data == "admin_remove_points":
        await start_remove_points(query, context)
    elif query.data == "admin_add_purchase":
        await start_add_purchase(query, context)
    elif query.data.startswith("admin_approve_"):
        await process_redemption_request(query, approve=True)
    elif query.data.startswith("admin_reject_"):
        await process_redemption_request(query, approve=False)
    elif query.data == "admin_back":
        await admin_back_handler(query, context)


async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    users = db.get_all_users()
    total_users = len(users)
    total_points = sum(user[5] for user in users)

    # –ü–æ–ª—É—á–∞–µ–º pending –∑–∞–ø—Ä–æ—Å—ã
    pending_requests = db.get_pending_redemption_requests()
    total_pending_points = sum(req[2] for req in pending_requests)

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_points}
‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_points / total_users if total_users > 0 else 0:.1f}

üîÑ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {len(pending_requests)}
üíé –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_pending_points} –±–∞–ª–ª–æ–≤

üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–ª–ª–æ–≤: {total_points} —Ä—É–±.
    """

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(stats_text, reply_markup=reply_markup)


async def show_users_list(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.get_all_users()

    if not users:
        await query.edit_message_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
        users_text += f"üÜî {user[0]} | üë§ {user[2]} {user[3]}\n"
        users_text += f"   üì± {user[4]} | üíé {user[5]} –±–∞–ª–ª–æ–≤\n\n"

    if len(users) > 15:
        users_text += f"... –∏ –µ—â–µ {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(users_text, reply_markup=reply_markup)


async def show_redemption_requests(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ"""
    requests = db.get_pending_redemption_requests()

    if not requests:
        await query.edit_message_text("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ")
        return

    requests_text = "üîÑ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
    for req in requests:
        req_id, user_id, points, first_name, last_name, phone = req
        requests_text += f"üìÖ –ó–∞–ø—Ä–æ—Å #{req_id}\n"
        requests_text += f"üë§ {first_name} {last_name} (ID: {user_id})\n"
        requests_text += f"üì± {phone}\n"
        requests_text += f"üíé {points} –±–∞–ª–ª–æ–≤ | üí∞ {points} —Ä—É–±.\n"
        requests_text += "   ‚úÖ / ‚ùå\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    keyboard = []
    for req in requests:
        req_id = req[0]
        keyboard.append([
            InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{req_id}", callback_data=f"admin_approve_{req_id}"),
            InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{req_id}", callback_data=f"admin_reject_{req_id}")
        ])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(requests_text, reply_markup=reply_markup)


async def process_redemption_request(query, approve=True):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤"""
    request_id = int(query.data.split('_')[2])

    try:
        result = db.process_redemption_request(request_id, query.from_user.id, approve)
        if not result:
            await query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return

        user_id, points_amount = result
        user = db.get_user_by_id(user_id)

        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_app = get_bot()
        try:
            if approve:
                user_message = f"""
‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω!

üíé –°–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤: {points_amount}
üí∞ –°—É–º–º–∞: {points_amount} —Ä—É–±.
üé´ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{request_id}

üí≥ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.
                """
            else:
                user_message = f"""
‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω

üíé –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {points_amount}
üé´ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{request_id}

üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """

            await bot_app.bot.send_message(user[1], user_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        status = "–û–î–û–ë–†–ï–ù" if approve else "–û–¢–ö–õ–û–ù–ï–ù"
        emoji = "‚úÖ" if approve else "‚ùå"

        result_text = f"""
{emoji} –ó–∞–ø—Ä–æ—Å #{request_id} {status}

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]} {user[3]}
üÜî ID: {user[0]}
üíé –ë–∞–ª–ª–æ–≤: {points_amount}
üí∞ –°—É–º–º–∞: {points_amount} —Ä—É–±.
üëë –û–±—Ä–∞–±–æ—Ç–∞–ª: {query.from_user.first_name}
        """

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(result_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")


# ===== –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –ë–ê–õ–õ–û–í =====
async def start_add_points(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    await query.edit_message_text(
        "‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    return ADMIN_ADD_POINTS_USER


async def get_user_for_add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    user_input = update.message.text.strip()

    try:
        if user_input.isdigit() and len(user_input) <= 4:  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = int(user_input)
            user = db.get_user_by_id(user_id)
        else:  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            users = db.get_all_users()
            user = next((u for u in users if u[4] == user_input), None)

        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_ADD_POINTS_USER

        context.user_data['admin_add_user'] = user
        await update.message.reply_text(
            f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üÜî ID: {user[0]}\n"
            f"üë§ –ò–º—è: {user[2]} {user[3]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[5]}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:"
        )
        return ADMIN_ADD_POINTS_AMOUNT

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return ADMIN_ADD_POINTS_USER


async def get_amount_for_add_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_ADD_POINTS_AMOUNT

        user = context.user_data['admin_add_user']

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        db.update_user_points(user[0], amount, f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_app = get_bot()
        try:
            await bot_app.bot.send_message(
                user[1],
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã!\n\n"
                f"üíé +{amount} –±–∞–ª–ª–æ–≤\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] + amount}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]} {user[3]}\n"
            f"üÜî ID: {user[0]}\n"
            f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{amount} –±–∞–ª–ª–æ–≤\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] + amount}"
        )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ADMIN_ADD_POINTS_AMOUNT


# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ö–£–ü–ö–ò (5% –ö–≠–®–ë–ï–ö) =====
async def start_add_purchase(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    await query.edit_message_text(
        "üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (5% –∫—ç—à–±–µ–∫)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    return ADMIN_ADD_PURCHASE_USER


async def get_user_for_add_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    user_input = update.message.text.strip()

    try:
        if user_input.isdigit() and len(user_input) <= 4:  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = int(user_input)
            user = db.get_user_by_id(user_id)
        else:  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            users = db.get_all_users()
            user = next((u for u in users if u[4] == user_input), None)

        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_ADD_PURCHASE_USER

        context.user_data['admin_purchase_user'] = user
        await update.message.reply_text(
            f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üÜî ID: {user[0]}\n"
            f"üë§ –ò–º—è: {user[2]} {user[3]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[5]}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (—Ä—É–±.):"
        )
        return ADMIN_ADD_PURCHASE_AMOUNT

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return ADMIN_ADD_PURCHASE_USER


async def get_amount_for_add_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫"""
    try:
        amount = int(update.message.text.strip())
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_ADD_PURCHASE_AMOUNT

        user = context.user_data['admin_purchase_user']

        # –ù–∞—á–∏—Å–ª—è–µ–º –∫—ç—à–±–µ–∫ 5%
        cashback = db.add_purchase(user[0], amount)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_app = get_bot()
        try:
            await bot_app.bot.send_message(
                user[1],
                f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±–µ–∫ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount} —Ä—É–±.\n"
                f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: +{cashback} (5%)\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] + cashback}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        await update.message.reply_text(
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]} {user[3]}\n"
            f"üÜî ID: {user[0]}\n"
            f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount} —Ä—É–±.\n"
            f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: +{cashback} (5%)\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] + cashback}"
        )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return ADMIN_ADD_PURCHASE_AMOUNT


# ===== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–ü–ò–°–ê–ù–ò–ï –ë–ê–õ–õ–û–í =====
async def start_remove_points(query, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    await query.edit_message_text(
        "‚ûñ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    return ADMIN_REMOVE_POINTS_USER


async def get_user_for_remove_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤"""
    user_input = update.message.text.strip()

    try:
        if user_input.isdigit() and len(user_input) <= 4:  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = int(user_input)
            user = db.get_user_by_id(user_id)
        else:  # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            users = db.get_all_users()
            user = next((u for u in users if u[4] == user_input), None)

        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_REMOVE_POINTS_USER

        context.user_data['admin_remove_user'] = user
        await update.message.reply_text(
            f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üÜî ID: {user[0]}\n"
            f"üë§ –ò–º—è: {user[2]} {user[3]}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[5]}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:"
        )
        return ADMIN_REMOVE_POINTS_AMOUNT

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        return ADMIN_REMOVE_POINTS_USER


async def get_amount_for_remove_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        amount = int(update.message.text.strip())
        user = context.user_data['admin_remove_user']

        if amount <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return ADMIN_REMOVE_POINTS_AMOUNT

        if amount > user[5]:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {user[5]}\n"
                f"–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            return ADMIN_REMOVE_POINTS_AMOUNT

        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        db.update_user_points(user[0], -amount, f"–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_app = get_bot()
        try:
            await bot_app.bot.send_message(
                user[1],
                f"üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤\n\n"
                f"üíé –°–ø–∏—Å–∞–Ω–æ: {amount} –±–∞–ª–ª–æ–≤\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: –°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] - amount}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        await update.message.reply_text(
            f"‚úÖ –ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]} {user[3]}\n"
            f"üÜî ID: {user[0]}\n"
            f"üíé –°–ø–∏—Å–∞–Ω–æ: {amount} –±–∞–ª–ª–æ–≤\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user[5] - amount}"
        )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ADMIN_REMOVE_POINTS_AMOUNT


async def admin_back_handler(query, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("‚≠ê –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data="admin_add_points")],
        [InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É (5%)", callback_data="admin_add_purchase")],
        [InlineKeyboardButton("‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã", callback_data="admin_remove_points")],
        [InlineKeyboardButton("üîÑ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_redemptions")],
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def cancel_admin_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END


# –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def get_admin_conversation_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""

    admin_add_points_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_points, pattern='^admin_add_points$')],
        states={
            ADMIN_ADD_POINTS_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_for_add_points)],
            ADMIN_ADD_POINTS_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount_for_add_points)]
        },
        fallbacks=[CommandHandler('cancel', cancel_admin_operation)],
        name="admin_add_points"
    )

    admin_remove_points_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_remove_points, pattern='^admin_remove_points$')],
        states={
            ADMIN_REMOVE_POINTS_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_for_remove_points)],
            ADMIN_REMOVE_POINTS_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount_for_remove_points)]
        },
        fallbacks=[CommandHandler('cancel', cancel_admin_operation)],
        name="admin_remove_points"
    )

    admin_add_purchase_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_purchase, pattern='^admin_add_purchase$')],
        states={
            ADMIN_ADD_PURCHASE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_for_add_purchase)],
            ADMIN_ADD_PURCHASE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount_for_add_purchase)]
        },
        fallbacks=[CommandHandler('cancel', cancel_admin_operation)],
        name="admin_add_purchase"
    )

    return [admin_add_points_conv, admin_remove_points_conv, admin_add_purchase_conv]