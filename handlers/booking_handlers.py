from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from database import Database

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
BOOK_DATE, BOOK_TIME, BOOK_GUESTS, BOOK_CONFIRM = range(4)

db = Database()


async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = db.get_user_by_telegram_id(query.from_user.id)
    if not user:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return ConversationHandler.END

    context.user_data['booking_user_id'] = user[0]
    await query.edit_message_text(
        "üé´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024"
    )
    return BOOK_DATE


async def get_booking_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = update.message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if len(date) != 10 or date[2] != '.' or date[5] != '.':
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024")
        return BOOK_DATE

    context.user_data['booking_date'] = date
    await update.message.reply_text(
        "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30"
    )
    return BOOK_TIME


async def get_booking_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if len(time) != 5 or time[2] != ':':
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30")
        return BOOK_TIME

    context.user_data['booking_time'] = time
    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")
    return BOOK_GUESTS


async def get_booking_guests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        guests = int(update.message.text.strip())

        if guests <= 0 or guests > 20:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
            return BOOK_GUESTS

        context.user_data['booking_guests'] = guests

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="booking_confirm")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="booking_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        booking_text = f"""
üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:

üìÖ –î–∞—Ç–∞: {context.user_data['booking_date']}
‚è∞ –í—Ä–µ–º—è: {context.user_data['booking_time']}
üë• –ì–æ—Å—Ç–∏: {guests} —á–µ–ª–æ–≤–µ–∫

–í—Å—ë –≤–µ—Ä–Ω–æ?
        """

        await update.message.reply_text(booking_text, reply_markup=reply_markup)
        return BOOK_CONFIRM

    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π:")
        return BOOK_GUESTS


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "booking_confirm":
        user_id = context.user_data['booking_user_id']
        date = context.user_data['booking_date']
        time = context.user_data['booking_time']
        guests = context.user_data['booking_guests']

        try:
            booking_id = db.create_booking(user_id, date, time, guests)

            booking_text = f"""
‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!

üé´ –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: #{booking_id}
üìÖ –î–∞—Ç–∞: {date}
‚è∞ –í—Ä–µ–º—è: {time}
üë• –ì–æ—Å—Ç–∏: {guests} —á–µ–ª–æ–≤–µ–∫

üéâ –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏!
üíé –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –≤–∞—à ID: {user_id}
            """

            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(booking_text, reply_markup=reply_markup)

        except Exception as e:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        context.user_data.clear()
        return ConversationHandler.END

    else:
        await query.edit_message_text("üé´ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return BOOK_DATE


async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END