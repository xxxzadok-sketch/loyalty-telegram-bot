from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, RedemptionRequest
from sqlalchemy.orm import Session
import config


async def start_redemption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    db: Session = SessionLocal()

    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user and user.registration_complete:
            await query.edit_message_text(
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance} –±–∞–ª–ª–æ–≤\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:"
            )
            context.user_data['awaiting_redemption_amount'] = True
        else:
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

    finally:
        db.close()


async def handle_redemption_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if context.user_data.get('awaiting_redemption_amount'):
        try:
            amount = int(update.message.text)
            user_id = update.effective_user.id

            db: Session = SessionLocal()

            try:
                user = db.query(User).filter(User.telegram_id == user_id).first()
                if user and user.bonus_balance >= amount:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ
                    redemption_request = RedemptionRequest(
                        user_id=user.id,
                        amount=amount
                    )
                    db.add(redemption_request)
                    db.commit()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    await notify_admins_about_redemption(context, user, redemption_request)

                    await update.message.reply_text(
                        f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ {amount} –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
                        f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                    )
                else:
                    await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –Ω–∞ —Å—á–µ—Ç–µ.")

            finally:
                db.close()

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

        context.user_data['awaiting_redemption_amount'] = False


async def notify_admins_about_redemption(context, user, redemption_request):
    message = f"üéÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤!\n\n"
    message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}\n"
    message += f"ID: {user.id}\n"
    message += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
    message += f"–°—É–º–º–∞: {redemption_request.amount} –±–∞–ª–ª–æ–≤\n"
    message += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance}"

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_redeem_confirm_{redemption_request.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_redeem_reject_{redemption_request.id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_id in config.ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup
            )
        except:
            pass


async def handle_admin_redemption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, request_id = query.data.split('_')[2], int(query.data.split('_')[3])

    db: Session = SessionLocal()

    try:
        redemption_request = db.query(RedemptionRequest).filter(RedemptionRequest.id == request_id).first()
        if redemption_request:
            user = db.query(User).filter(User.id == redemption_request.user_id).first()

            if action == 'confirm' and user.bonus_balance >= redemption_request.amount:
                user.bonus_balance -= redemption_request.amount
                redemption_request.status = 'approved'
                db.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {redemption_request.amount} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n"
                             f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance}"
                    )
                except:
                    pass

                await query.edit_message_text(f"–°–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")
            else:
                redemption_request.status = 'rejected'
                db.commit()
                await query.edit_message_text("–°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

    finally:
        db.close()