from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import SessionLocal, User
from sqlalchemy.orm import Session
import config

REGISTRATION = range(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    db: Session = SessionLocal()

    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if user and user.registration_complete:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            keyboard = [
                [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="booking")],
                [InlineKeyboardButton("üéÅ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã", callback_data="redeem_bonus")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!",
                reply_markup=reply_markup
            )
        elif user and not user.registration_complete:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            await ask_registration_data(update, context)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = User(telegram_id=user_id)
            db.add(user)
            db.commit()

            context.user_data['registration_step'] = 0
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
            )
            await ask_registration_data(update, context)

    finally:
        db.close()


async def ask_registration_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    steps = ["–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"]
    current_step = context.user_data.get('registration_step', 0)

    if current_step < len(steps):
        await update.message.reply_text(steps[current_step])
        return REGISTRATION
    else:
        await show_registration_summary(update, context)
        return ConversationHandler.END


async def handle_registration_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_step = context.user_data.get('registration_step', 0)
    text = update.message.text

    if current_step == 0:
        context.user_data['first_name'] = text
    elif current_step == 1:
        context.user_data['last_name'] = text
    elif current_step == 2:
        context.user_data['phone'] = text

    context.user_data['registration_step'] = current_step + 1
    await ask_registration_data(update, context)


async def show_registration_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_registration"),
            InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="edit_registration")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    summary = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
    summary += f"–ò–º—è: {context.user_data.get('first_name', '')}\n"
    summary += f"–§–∞–º–∏–ª–∏—è: {context.user_data.get('last_name', '')}\n"
    summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone', '')}"

    await update.message.reply_text(summary, reply_markup=reply_markup)


async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    db: Session = SessionLocal()

    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            user.first_name = context.user_data.get('first_name')
            user.last_name = context.user_data.get('last_name')
            user.phone = context.user_data.get('phone')
            user.bonus_balance = 100  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã
            user.registration_complete = True

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID (–æ—Ç 1 –¥–æ 3000)
            max_id_user = db.query(User).filter(User.id.between(1, 3000)).order_by(User.id.desc()).first()
            new_id = 1 if not max_id_user else max_id_user.id + 1
            if new_id > 3000:
                # –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π ID
                used_ids = {u.id for u in db.query(User.id).filter(User.id.between(1, 3000)).all()}
                new_id = next(i for i in range(1, 3001) if i not in used_ids)

            user.id = new_id
            db.commit()

            keyboard = [
                [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton("üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª", callback_data="booking")],
                [InlineKeyboardButton("üéÅ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã", callback_data="redeem_bonus")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n"
                f"–í–∞—à ID: {new_id}\n\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {user.last_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}",
                reply_markup=reply_markup
            )

    finally:
        db.close()


async def edit_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['registration_step'] = 0
    await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
    await ask_registration_data(update, context)

    async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if context.user_data.get('registration_step') is not None:
            await handle_registration_data(update, context)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
        elif context.user_data.get('awaiting_redemption_amount'):
            await redemption_handlers.handle_redemption_confirmation(update, context)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif context.user_data.get('awaiting_booking_data'):
            await booking_handlers.handle_booking_data(update, context)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if context.user_data.get('registration_step') is not None:
        await handle_registration_data(update, context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    elif context.user_data.get('awaiting_redemption_amount'):
        await redemption_handlers.handle_redemption_confirmation(update, context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    elif context.user_data.get('awaiting_booking_data'):
        await booking_handlers.handle_booking_data(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")