# main.py
import logging
import os
import asyncio
from flask import Flask, request
from telegram import Update

from bot import create_application
from config import BOT_TOKEN

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
application = None


@app.route('/')
def index():
    return "ü§ñ Telegram Loyalty Bot is running via Webhook!"


def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        from commands import set_bot_commands
        loop.run_until_complete(set_bot_commands())
        loop.close()
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")


# –í main.py —Ñ—É–Ω–∫—Ü–∏—è init_bot() –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global application

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = create_application()
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ë–ï–ó application.start())
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.initialize())
        logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_url = os.environ.get('RENDER_EXTERNAL_URL', '') + '/webhook'
        if webhook_url.startswith('https://'):
            loop.run_until_complete(application.bot.set_webhook(webhook_url))
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.warning("‚ö†Ô∏è Webhook URL –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ HTTPS")

        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return application

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return None


@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    global application

    if application is None:
        logger.error("‚ùå Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return 'error', 500

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        update_data = request.get_json()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'message' in update_data and 'text' in update_data['message']:
            user_id = update_data['message']['from']['id']
            text = update_data['message']['text']
            logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(update_data, application.bot)

        # ‚≠ê –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º create_task –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        import asyncio
        async def process_async():
            try:
                await application.process_update(update)
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            except Exception as e:
                if "Event loop is closed" not in str(e):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(process_async())
        loop.close()

        return 'ok'

    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return 'error', 500


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
application = init_bot()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
set_commands()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)